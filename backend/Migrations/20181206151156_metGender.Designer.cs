// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.Models;

namespace backend.Migrations
{
    [DbContext(typeof(FashionContext))]
    [Migration("20181206151156_metGender")]
    partial class metGender
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("backend.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<int>("CountryId");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10);

                    b.Property<string>("Street");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("backend.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new { Id = 1, Name = "Dames" },
                        new { Id = 2, Name = "Heren" },
                        new { Id = 3, Name = "Schoenen" },
                        new { Id = 4, Name = "Shirts" },
                        new { Id = 5, Name = "Jeans" },
                        new { Id = 6, Name = "Hoodies" },
                        new { Id = 7, Name = "Vesten" },
                        new { Id = 8, Name = "Adidas" },
                        new { Id = 9, Name = "Nike" },
                        new { Id = 10, Name = "HRFashion" },
                        new { Id = 11, Name = "Puma" },
                        new { Id = 12, Name = "Timberland" },
                        new { Id = 13, Name = "Reebok" },
                        new { Id = 14, Name = "Vans" }
                    );
                });

            modelBuilder.Entity("backend.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new { Id = 1, Name = "Nederland" }
                    );
                });

            modelBuilder.Entity("backend.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("DiscountPercentage");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("ProductId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("backend.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressId");

                    b.Property<int>("StatusId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("backend.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<string>("Color");

                    b.Property<string>("Description");

                    b.Property<string>("ImageName");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.Property<int>("ProductSizeId");

                    b.HasKey("Id");

                    b.HasIndex("ProductSizeId");

                    b.ToTable("Products");

                    b.HasData(
                        new { Id = 1, Amount = 20, Color = "Zwart", Description = "Coole zwarte sweatshirt voor heren.", ImageName = "https://img.represent.com/uploads/c316464e3c69408be954c6d05edd10a9.jpg?auto=format&w=750", Name = "Zwarte Sweat Shirt", Price = 39.99m, ProductSizeId = 3 },
                        new { Id = 2, Amount = 20, Color = "Zwart", Description = "Gentleman schoenen voor echte heren", ImageName = "https://assets.adidas.com/images/w_600,f_auto,q_auto/ab12ced1d0a14151b88ea7fa00ee94a1_9366/Superstar_Foundation_Shoes_Black_B27140_01_standard.jpg", Name = "Zwarte Schoenen", Price = 19.99m, ProductSizeId = 17 },
                        new { Id = 3, Amount = 20, Color = "Zwart", Description = "Super coole Adidas swag shirt.", ImageName = "https://kickz.akamaized.net/en/media/images/p/600/adidas-CLFN_T_Shirt-BLACK_MEDIUM_GREY_HEATHER_WHITE-1.jpg", Name = "Adidas Swag Shirt", Price = 24.99m, ProductSizeId = 3 },
                        new { Id = 4, Amount = 20, Color = "Blauw", Description = "Stoere Koreaanse Jeans van denim voor heren.", ImageName = "https://www.local-outerwear.eu/wp-content/uploads/2015/11/W16-902BJ-Dawn_Front.jpg", Name = "Koreaanse Jeans", Price = 49.99m, ProductSizeId = 3 },
                        new { Id = 5, Amount = 20, Color = "Black", Description = "Super coole zwarte vest voor echte swaggers.", ImageName = "https://images.esellerpro.com/2294/I/111/28/lrgscaleNH45BLACK_NEW.jpg", Name = "Zwarte Vest", Price = 79.99m, ProductSizeId = 4 },
                        new { Id = 6, Amount = 20, Color = "Blauw", Description = "Sexy strakke jeans voor vrouwen met scheuren.", ImageName = "https://images-na.ssl-images-amazon.com/images/I/71lO9goTlGL._UY445_.jpg", Name = "Sexy Vrouwen Jeans", Price = 29.99m, ProductSizeId = 2 },
                        new { Id = 7, Amount = 20, Color = "Rood", Description = "Thug Life rode swag hoodie voor jongens. Word een beest in deze hoodie!", ImageName = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQmSJ2f1znHd7v7lL18PLNS3A7dL_UQeuqU6NmiyscbY1NFRqpvJA", Name = "Rode Swag Hoodie", Price = 45.99m, ProductSizeId = 5 },
                        new { Id = 8, Amount = 20, Color = "Wit", Description = "Witte Swag Adidas schoenen voor heren. Boost je Imago en wordt de baddest boy in je omgeving met deze schoenen. ", ImageName = "https://dtpmhvbsmffsz.cloudfront.net/posts/2017/09/13/59b958a17f0a053a7b03e25f/m_59b958b8713fde7bfd03fda2.jpg", Name = "Witte Adidas Schoen", Price = 17.99m, ProductSizeId = 19 },
                        new { Id = 9, Amount = 20, Color = "Zwart", Description = "Swag Boots voor stoere vrouwen. Word de baddest chick in town.", ImageName = "https://images.timberland.com/is/image/timberland/10073009-HERO?$PDP-FULL-IMAGE$", Name = "Zwarte Swag Boots", Price = 39.99m, ProductSizeId = 10 },
                        new { Id = 10, Amount = 20, Color = "Geel", Description = "Geel shirt voor heren. Opvallende kleur zodat iedereen je ziet staan.", ImageName = "https://scene7.zumiez.com/is/image/zumiez/pdp_hero/DOPE-Global-Yellow-T-Shirt-_297867-front-US.jpg", Name = "Geel Shirt", Price = 14.99m, ProductSizeId = 2 }
                    );
                });

            modelBuilder.Entity("backend.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategory");

                    b.HasData(
                        new { Id = 1, CategoryId = 2, ProductId = 1 },
                        new { Id = 2, CategoryId = 4, ProductId = 1 },
                        new { Id = 3, CategoryId = 10, ProductId = 1 },
                        new { Id = 4, CategoryId = 2, ProductId = 2 },
                        new { Id = 5, CategoryId = 3, ProductId = 2 },
                        new { Id = 6, CategoryId = 10, ProductId = 2 },
                        new { Id = 7, CategoryId = 2, ProductId = 3 },
                        new { Id = 8, CategoryId = 4, ProductId = 3 },
                        new { Id = 9, CategoryId = 8, ProductId = 3 },
                        new { Id = 10, CategoryId = 2, ProductId = 4 },
                        new { Id = 11, CategoryId = 5, ProductId = 4 },
                        new { Id = 12, CategoryId = 10, ProductId = 4 },
                        new { Id = 13, CategoryId = 2, ProductId = 5 },
                        new { Id = 14, CategoryId = 7, ProductId = 5 },
                        new { Id = 15, CategoryId = 10, ProductId = 5 },
                        new { Id = 16, CategoryId = 1, ProductId = 6 },
                        new { Id = 17, CategoryId = 5, ProductId = 6 },
                        new { Id = 18, CategoryId = 10, ProductId = 6 },
                        new { Id = 19, CategoryId = 2, ProductId = 7 },
                        new { Id = 20, CategoryId = 6, ProductId = 7 },
                        new { Id = 21, CategoryId = 9, ProductId = 7 },
                        new { Id = 22, CategoryId = 2, ProductId = 8 },
                        new { Id = 23, CategoryId = 3, ProductId = 8 },
                        new { Id = 24, CategoryId = 8, ProductId = 8 },
                        new { Id = 25, CategoryId = 1, ProductId = 9 },
                        new { Id = 26, CategoryId = 3, ProductId = 9 },
                        new { Id = 27, CategoryId = 10, ProductId = 9 },
                        new { Id = 28, CategoryId = 2, ProductId = 10 },
                        new { Id = 29, CategoryId = 4, ProductId = 10 },
                        new { Id = 30, CategoryId = 10, ProductId = 10 }
                    );
                });

            modelBuilder.Entity("backend.Models.ProductSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SizeName");

                    b.HasKey("Id");

                    b.ToTable("ProductSizes");

                    b.HasData(
                        new { Id = 1, SizeName = "XS" },
                        new { Id = 2, SizeName = "S" },
                        new { Id = 3, SizeName = "M" },
                        new { Id = 4, SizeName = "L" },
                        new { Id = 5, SizeName = "XL" },
                        new { Id = 6, SizeName = "XXL" },
                        new { Id = 7, SizeName = "34" },
                        new { Id = 8, SizeName = "35" },
                        new { Id = 9, SizeName = "36" },
                        new { Id = 10, SizeName = "37" },
                        new { Id = 11, SizeName = "38" },
                        new { Id = 12, SizeName = "39" },
                        new { Id = 13, SizeName = "40" },
                        new { Id = 14, SizeName = "41" },
                        new { Id = 15, SizeName = "42" },
                        new { Id = 16, SizeName = "43" },
                        new { Id = 17, SizeName = "44" },
                        new { Id = 18, SizeName = "45" },
                        new { Id = 19, SizeName = "46" },
                        new { Id = 20, SizeName = "47" },
                        new { Id = 21, SizeName = "48" },
                        new { Id = 22, SizeName = "49" }
                    );
                });

            modelBuilder.Entity("backend.Models.ProductSold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<DateTime>("Date");

                    b.Property<int>("DiscountId");

                    b.Property<int>("OrderId");

                    b.Property<int>("ProductId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ProductsSold");
                });

            modelBuilder.Entity("backend.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new { Id = 1, Description = "The transaction has been marked for review, typically by the payment gateway.", Name = "Review" },
                        new { Id = 2, Description = "The the purchase order for the transaction has been created.This status is set at the very onset of the transaction, typically before the invoiced balance is set, and before the paymentis authorized or paid.", Name = "Purchase Order" },
                        new { Id = 3, Description = "The transaction is invoiced, and the order total becomes an open balance.", Name = "Invoiced" },
                        new { Id = 4, Description = "The payment for the transaction has been authorized by the payment gateway.", Name = "Authorized" },
                        new { Id = 5, Description = "The payment for the transaction has been accepted by the payment gateway.", Name = "Paid" },
                        new { Id = 6, Description = "The order has been marked as shipped by the merchant.", Name = "Shipped" },
                        new { Id = 7, Description = "The payment for the transaction has been refunded.", Name = "Refunded" },
                        new { Id = 8, Description = "The balance on the transaction has been voided.", Name = "Voided" }
                    );
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateOn")
                        .HasMaxLength(15);

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("Gender");

                    b.Property<string>("Key");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("Rank");

                    b.Property<string>("Salt");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("backend.Models.WishListProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProductId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("WishListProducts");
                });

            modelBuilder.Entity("backend.Models.Address", b =>
                {
                    b.HasOne("backend.Models.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("backend.Models.Discount", b =>
                {
                    b.HasOne("backend.Models.Product", "Product")
                        .WithOne("Discount")
                        .HasForeignKey("backend.Models.Discount", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("backend.Models.Order", b =>
                {
                    b.HasOne("backend.Models.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("backend.Models.Status", "Status")
                        .WithMany("Order")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("backend.Models.Product", b =>
                {
                    b.HasOne("backend.Models.ProductSize", "ProductSize")
                        .WithMany("Products")
                        .HasForeignKey("ProductSizeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("backend.Models.ProductCategory", b =>
                {
                    b.HasOne("backend.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("backend.Models.Product", "Product")
                        .WithMany("Categories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("backend.Models.ProductSold", b =>
                {
                    b.HasOne("backend.Models.Discount", "Discount")
                        .WithMany("ProductsSold")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("backend.Models.Order", "Order")
                        .WithMany("ProductsSold")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("backend.Models.Product", "Product")
                        .WithOne("ProductSold")
                        .HasForeignKey("backend.Models.ProductSold", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("ProductsSold")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("backend.Models.WishListProduct", b =>
                {
                    b.HasOne("backend.Models.Product", "Product")
                        .WithMany("WishListProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("WishListProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
